/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: AlmondFeather (https://sketchfab.com/almondfeather)
license: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
source: https://sketchfab.com/3d-models/manta-ray-bubble-c77139bed1b149c2ac8863909490193f
title: Manta ray bubble
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useSphere } from "@react-three/cannon";
import { Vector3 } from "three";
import { OceanStore } from "../OceanStore";

export default function Manta({ ...props }) {
  let y = 0;
  let z = [0, 0]; // index 1 현재 값, index 2 상승 폭
  let r = [-1, 0];
  let check = false;
  let straight = false;
  let before = null;
  let cameraTarget = useRef(OceanStore.getState().oceanCameraTarget);

  const rRef = useRef();
  const [pRef, pApi] = useSphere(() => ({
    type: "Kinematic",
    mass: 1,
    args: [1],
    ...props,
  }));
  const { nodes, materials, animations } = useGLTF("/oceans/manta/scene.gltf");
  const { actions } = useAnimations(animations, pRef);

  useEffect(() => {
    actions.Swimming.play();
    // if (pRef.current) {
    //   pRef.current.userData = {
    //     name: "대왕쥐가오리(manta ray)",
    //     habitat: "열대, 아열대",
    //     characteristic: [
    //       {
    //         name: "거대한 가오리",
    //         descript: "현존하는 가오리 중 가장 거대한 종",
    //       },
    //       {
    //         name: "앞 지느러미",
    //         descript: "앞 지느러미는 먹이를 입 주위로 모으는 역할을 한다.",
    //       },
    //       {
    //         name: "여과 섭식자",
    //         descript:
    //           "여과 섭식자는 특화된 여과 구조를 가지고 있으며 물을 통과시켜 물속의 입자나 부유 물질을 걸러 먹는 포식자를 뜻한다.",
    //       },
    //     ],
    //   };
    // }
  });

  useEffect(() => {
    OceanStore.subscribe(
      (state) => (cameraTarget.current = state.oceanCameraTarget),
      (state) => state
    );
  });

  useFrame(({ camera }) => {
    if (rRef.current) {
      const [tX, tY, tZ] = rRef.current.getWorldPosition(new Vector3());
      const [bX, bY, bZ] = pRef.current.getWorldPosition(new Vector3());
      pRef.current.lookAt(tX, tY, tZ);

      if (cameraTarget.current === "대왕쥐가오리") {
        camera.position.set(bX + 200, bY + 500, bZ + 500);
        camera.lookAt(bX, bY, bZ);
      }

      if (!check) {
        check = true;
        const num = Math.floor(Math.random() * 3);
        setTimeout(() => {
          check = false;
        }, 3000);

        if (num === 0) {
          r[1] = 0.003;
          z[1] = -0.01;
          straight = false;
          before = "left";
        } else if (num === 1) {
          r[1] = -0.003;
          z[1] = 0.01;
          straight = false;
          before = "right";
        } else if (num === 2) {
          r[1] = 0;
          z[1] = z[0] > 0 ? -0.01 : z[0] === 0 ? 0 : 0.01;
          straight = true;
        }
      }
      pApi.rotation.set(y, (r[0] += r[1]), (z[0] += z[1]));
      if (!straight && (z[0] > 0.5 || z[0] < -0.5)) {
        z[1] = 0;
        z[0] = z[0] > 0.5 ? 0.49 : -0.49;
      } else if (straight) {
        if (before === "left" && z[0] > -0.01) {
          z[1] = 0;
          z[0] = 0;
        } else if (before === "right" && z[0] < 0.01) {
          z[1] = 0;
          z[0] = 0;
        }
      }
      pApi.velocity.set((tX - bX) / 20, (tY - bY) / 20, (tZ - bZ) / 20);
      if (bX < -1600) pApi.position.set(1590, bY, bZ);
      if (bX > 1600) pApi.position.set(-1590, bY, bZ);
      if (bZ < -1600) pApi.position.set(bX, bY, 1590);
      if (bZ > 1600) pApi.position.set(bX, bY, -1590);
    }
  });
  return (
    <group
      ref={pRef}
      {...props}
      dispose={null}
      onClick={(e) => {
        const { oceanCameraTarget } = OceanStore.getState();
        OceanStore.setState({
          oceanCameraTarget: !oceanCameraTarget ? "대왕쥐가오리" : false,
        });
        e.stopPropagation();
      }}>
      <mesh ref={rRef} name="rotation_pos" position={[0, 0, 50]}></mesh>
      <group name="Sketchfab_Scene">
        <group
          name="Sketchfab_model"
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.41}>
          <group name="Root">
            <group name="Rausku_armature">
              <primitive object={nodes.Rausku_armature_rootJoint} />
              <group name="Rausku_mesh" />
              <skinnedMesh
                castShadow
                name="Rausku_mesh_0"
                geometry={nodes.Rausku_mesh_0.geometry}
                material={materials.Rausku_texture}
                skeleton={nodes.Rausku_mesh_0.skeleton}
              />
              <skinnedMesh
                castShadow
                name="Rausku_mesh_1"
                geometry={nodes.Rausku_mesh_1.geometry}
                material={materials.Rausku_outline}
                skeleton={nodes.Rausku_mesh_1.skeleton}
              />
            </group>
            <group name="Fish_Armature">
              <primitive object={nodes.Fish_Armature_rootJoint} />
              <group name="Fish_mesh" />
              <skinnedMesh
                castShadow
                name="Fish_mesh_0"
                geometry={nodes.Fish_mesh_0.geometry}
                material={materials.Rausku_outline}
                skeleton={nodes.Fish_mesh_0.skeleton}
              />
            </group>
            <group name="Fish_Armature001">
              <primitive object={nodes.Fish_Armature001_rootJoint} />
              <group name="Fish_mesh001" />
              <skinnedMesh
                castShadow
                name="Fish_mesh001_0"
                geometry={nodes.Fish_mesh001_0.geometry}
                material={materials.Rausku_outline}
                skeleton={nodes.Fish_mesh001_0.skeleton}
              />
            </group>
            <group name="Fish_Armature002">
              <primitive object={nodes.Fish_Armature002_rootJoint} />
              <group name="Fish_mesh002" />
              <skinnedMesh
                castShadow
                name="Fish_mesh002_0"
                geometry={nodes.Fish_mesh002_0.geometry}
                material={materials.Rausku_outline}
                skeleton={nodes.Fish_mesh002_0.skeleton}
              />
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/oceans/manta/scene.gltf");

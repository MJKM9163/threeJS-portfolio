/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: BlueMesh (https://sketchfab.com/VapTor)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/guppy-fish-21e14e4b961e406385539f79eacdb1dc
title: Guppy Fish
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { Vector3 } from "three";
let a = 0;
let b = 0;
let c = 0;
export default function Guppy({ ...props }) {
  const rRef = useRef();
  const pRef = useRef();
  const { nodes, materials, animations } = useGLTF("/oceans/guppy/scene.gltf");
  const { actions } = useAnimations(animations, pRef);
  useEffect(() => {
    actions["ArmatureAction.001"].play();
  }, []);
  useFrame(() => {
    if (rRef.current) {
      const [tX, tY, tZ] = rRef.current.getWorldPosition(new Vector3());
      const [bX, bY, bZ] = pRef.current.getWorldPosition(new Vector3());
      pRef.current.lookAt(tX, tY, -tZ);
      //console.log(tZ, bZ);
      pRef.current.rotation.set(0, (c -= 0.002), 0);
      pRef.current.position.set(
        (a += (tX - bX) / 100),
        200,
        (b += (tZ - bZ) / 100)
      ); // < -- velocity로 바꾸기
    }
  });
  return (
    <group ref={pRef} {...props} dispose={null}>
      <mesh ref={rRef} name="rotation_pos" position={[0, 0, -5]}>
        <boxGeometry args={[1, 1, 1]} />
        <meshNormalMaterial />
      </mesh>
      <group name="Sketchfab_Scene" castShadow>
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="Root">
            <group
              name="Lamp"
              position={[4.08, 1.01, 5.9]}
              rotation={[-0.27, 0.6, 1.93]}>
              <group name="Lamp_1" />
            </group>
            <group name="Armature" position={[0, 3.2, 0.62]}>
              <primitive object={nodes.Armature_rootJoint} />
              <group
                name="Circle"
                position={[0, -0.4, 0.06]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.37, 0.61, 0.61]}
              />
              <group
                name="Circle001"
                position={[0.18, 0.76, 0.15]}
                rotation={[0, Math.PI / 2, 0]}
                scale={0.15}
              />
              <group
                name="Circle002"
                position={[0, -0.4, 0.06]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.37, 0.61, 0.61]}
              />
              <group
                name="Circle003"
                position={[0, -0.4, 0.06]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={[0.37, 0.61, 0.61]}
              />
              <skinnedMesh
                name="Circle_0"
                geometry={nodes.Circle_0.geometry}
                material={materials["Material.001"]}
                skeleton={nodes.Circle_0.skeleton}
              />
              {/* <skinnedMesh
                name="Circle001_0"
                geometry={nodes.Circle001_0.geometry}
                material={materials["Material.001"]}
                skeleton={nodes.Circle001_0.skeleton}
              /> */}
              <skinnedMesh
                name="Circle002_0"
                geometry={nodes.Circle002_0.geometry}
                material={materials["Material.001"]}
                skeleton={nodes.Circle002_0.skeleton}
              />
              <skinnedMesh
                name="Circle003_0"
                geometry={nodes.Circle003_0.geometry}
                material={materials["Material.001"]}
                skeleton={nodes.Circle003_0.skeleton}
              />
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/oceans/guppy/scene.gltf");
